json_icons |> purrr::pluck(1)
json_icons |> purrr::pluck(1) |> names()
json_icons |>  names()
tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name)
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name)
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=map_chr(real_name,~pluck(json_icons,.x,"unicode"))
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~pluck(json_icons,.x,"unicode"))
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode"))
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa=paste0("\U",fa)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_chr(real_name, ~ purrr::pluck(json_icons, .x, "unicode")),
fa_character = purrr::map_chr(fa_unicode, ~ intToUtf8(as.integer(.x, 16)))  # Convert to Unicode character
)
cat("\Uf270")
as.hexmode("30")
30
intToUtf8(30)
intToUtf8(30,16)
intToUtf8(30,16) %>% paste("\U",.)
intToUtf8(as.integer(30),16) %>% paste("\U",.)
intToUtf8(as.integer(30),16)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_chr(real_name, ~ purrr::pluck(json_icons, .x, "unicode")),
fa_character = purrr::map_chr(fa_unicode, ~ intToUtf8(as.integer(.x)))  # Convert to Unicode character
)
"\u001e"
"\uf26e"
"\uf30"
"\uf31"
"\uf32"
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_chr(real_name, ~ purrr::pluck(json_icons, .x, "unicode")),
fa_character = purrr::map_chr(fa_unicode, ~ intToUtf8(as.integer(.x)))  # Convert to Unicode character
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_chr(real_name, ~ purrr::pluck(json_icons, .x, "unicode")),
fa_character = purrr::map_vector(fa_unicode, ~ intToUtf8(as.integer(.x)))  # Convert to Unicode character
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_chr(real_name, ~ purrr::pluck(json_icons, .x, "unicode")),
fa_character = purrr::map_vec(fa_unicode, ~ intToUtf8(as.integer(.x)))  # Convert to Unicode character
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_chr(real_name, ~ purrr::pluck(json_icons, .x, "unicode")),
fa_character = purrr::map_vec(fa_unicode, ~ intToUtf8(as.integer(.x)))  # Convert to Unicode character
) |>
filter(if_any(is.na))
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_chr(real_name, ~ purrr::pluck(json_icons, .x, "unicode")),
fa_character = purrr::map_vec(fa_unicode, ~ intToUtf8(as.integer(.x)))  # Convert to Unicode character
) |>
filter(if_any(fa_character,is.na))
"\u001e"
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_chr(real_name, ~ purrr::pluck(json_icons, .x, "unicode"))# Convert to Unicode character
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(intToUtf8(fa))# Convert to Unicode character
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,intToUtf8(.))# Convert to Unicode character
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,intToUtf8(.x))# Convert to Unicode character
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,~intToUtf8(.x))# Convert to Unicode character
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,~intToUtf8(.x,allow_surrogate_pairs = TRUE))# Convert to Unicode character
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,~intToUtf8(.x,allow_surrogate_pairs = TRUE))# Convert to Unicode character
) |> View()
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,~intToUtf8(as.hexmode(.x)),allow_surrogate_pairs = TRUE))# Convert to Unicode character
) |> View()
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,~as.hexmode(.x)),allow_surrogate_pairs = TRUE))# Convert to Unicode character
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x)
)
)|> View()
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x) |> as.interger()
)
)|> View()
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x) |> as.interger()
)
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x) |> as.integer()
)
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x) |>
as.integer() |>
intToUtf8()
)
)
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x) |>
as.integer() |>
intToUtf8()
)
) |> View()
json_icons <- jsonlite::fromJSON("inst/fonts/icons.json")
json_icons <- jsonlite::fromJSON(txt = "inst/fonts/icons.json")
json_icons <- jsonlite::fromJSON(file= "inst/fonts/icons.json")
jsonlite::fromJSON("inst/fonts/icons.json")
json_icons <- jsonlite::fromJSON("inst/fonts/icons.json")
json_icons <- jsonlite::fromJSON(readLines("inst/fonts/icons.json"))
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x) |>
as.integer() |>
intToUtf8()
)
)
json_icons <- jsonlite::fromJSON(readLines("inst/fonts/icons.json"))
json_icons <- jsonlite::fromJSON(readLines("inst/fonts/icons.json"))
dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x) |>
as.integer() |>
intToUtf8()
)
)
json_icons <- jsonlite::fromJSON(readLines("inst/fonts/icons.json"))
fontawesome_data <- dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x) |>
as.integer() |>
intToUtf8()
)
)
json_icons <- jsonlite::fromJSON(readLines("inst/fonts/icons.json"))
json_icons <- jsonlite::fromJSON(readLines(system.file("inst/fonts/icons.json",package = "emojifonts")))
system.file("inst/fonts/icons.json",package = "emojifonts")
system.file("inst/fonts/icons.json",package = "emojifont")
system.file("fonts/icons.json",package = "emojifont")
json_icons <- jsonlite::fromJSON(readLines(system.file("fonts/icons.json",package = "emojifont")))
fontawesome_data <- dplyr::tibble(
real_name=json_icons |>  names()
) |>
dplyr::mutate(
aliases=paste0("fa-",real_name),
fa=purrr::map_chr(real_name,~purrr::pluck(json_icons,.x,"unicode")),
fa_unicode = purrr::map_vec(fa,
~as.hexmode(
.x) |>
as.integer() |>
intToUtf8()
)
)
fontawesome_data |> dplyr::slice_sample()
save(emoji_data,fontawesome_data,compress = "xz")
save(emoji_data,fontawesome_data, file = "R/sysdata.rda",compress = "xz")
save(emoji_data,fontawesome_data, file = "R/sysdata.rda")
save(emoji_data,fontawesome_data |> as.data.frame(), file = "R/sysdata.rda")
save(emoji_data,fontawesome_data |> as.data.frame(), file = "R/sysdata.rda")
save(emoji_data,fontawesome_data |> as.data.frame(), file = "R/sysdata.rda")
save(emoji_data,fontawesome_data , file = "R/sysdata.rda")
save(emoji_data,fontawesome_data , file = "./R/sysdata.rda")
save(emoji_data,fontawesome_data , file = "./R/sysdata.rda",compress = "xz")
save(emoji_data,fontawesome_data , file = "./R/sysdata.rda",compress = "xz")
save(emoji_data,fontawesome_data , file = "R/sysdata.rda",compress = "xz")
devtools::load_all()
save(emoji_data,fontawesome_data , file = "R/sysdata.rda",compress = "xz")
cwd()
getwd(
)
here()
here::here()
install.packages("here")
here::here()
usethis::use_package("here")
#So this compiles i t
#devtools::load_all()
f <- system.file("fonts/icons.json",package = "emojifont")
f
system.file(package="emojifont")
#So this compiles for your version of the package
devtools::load_all()
f <- file.path(system.file(package = "emojifont"), "fonts", "icons.json"),
f <- file.path(system.file(package = "emojifont"), "fonts", "icons.json")
f
# Load and process the JSON data
json_icons <- jsonlite::fromJSON(readLines(f, encoding = "UTF-8"))
# Create a tibble with the updated FontAwesome data
fontawesome_data <- dplyr::tibble(
real_name = names(json_icons)
) |>
dplyr::mutate(
aliases = paste0("fa-", real_name),
fa = purrr::map_chr(real_name, ~ purrr::pluck(json_icons, .x, "unicode")),
fa_unicode = purrr::map_vec(
fa,
~ as.hexmode(.x) |>
as.integer() |>
intToUtf8()
)
)
# Display a random sample of the updated data
fontawesome_data |> dplyr::slice_sample()
# Save updated data to sysdata.rda
save(
emoji_data, fontawesome_data,
file = file.path(here::here(), "R", "sysdata.rda"),
compress = "xz"
)
# Save updated data to sysdata.rda
save(
emoji_data, fontawesome_data,
file = file.path(here::here(), "R", "sysdata.rda"),
compress = "xz"
)
efproto$get_path("fonts")
efproto$list_fonts("fonts")
:w
efproto$list_fonts("fonts")
devtools::check()
devtools::build()
devtools::load_all()
devtools::build()
fontawesome(c('fa-github', 'fa-weibo', 'fa-twitter', 'fa-android', 'fa-coffee')
)
devtools::load_all()
fontawesome_data
# Load and process the JSON data
json_icons <- jsonlite::fromJSON(readLines(f, encoding = "UTF-8"))
devtools::load_all()
fontawesome_data
devtools::load_all()
fontawesome_data
devtools::load_all(reset=TRUE)
fontawesome_data
load.fontawesome()
efproto$list_fonts("fontawesome")
lapply(fnts, function(f) efproto$load_font(f, type = 'fontawesome'))
fnts <- efproto$list_fonts("fontawesome")
# purrr::walk(fnts, efproto$load_font, type='fontawesome')
lapply(fnts, function(f) efproto$load_font(f, type = 'fontawesome'))
sysfonts::font_families()
devtools::load_all()
fontawesome_data
load.fontawesome
devtools::check()
devtools::check_dep_version()
devtools::build()
devtools::release()
devtools::github_release()
systemfonts::system_fonts() |> View()
load.fontawesome()
systemfonts::system_fonts()
systemfonts::system_fonts() |> dplyr::filter(stringr::str_detect(path,"rstudio"))
systemfonts::system_fonts() |> dplyr::filter(stringr::str_detect(path,"share"))
efproto$list_fonts("fontawesome")
efproto$get_path("fontawesome")
fotn <- "fa-brands-400.ttf"
font <- "fa-brands-400.ttf"
font_path <- efproto$get_path("fontawesome")
wd <- getwd()
setwd(font_path)
if (!file.exists(font)) {
setwd(wd)
stop("font doesn't exist...")
}
sub("\\..*", "", font)
font_add(sub("\\..*", "", font), font)
sysfonts::font_families()
devtools::load_all()
devtools::load_all()
ggplot()+geom_fontawesome(
"fa-person-half-dress"
)
ggplot()+geom_fontawesome(
"fa-person-half-dress",
family = "fa-solid-900"
)
ggplot()+geom_fontawesome(
"fa-person-half-dress",
family = "fa-regular-400"
)
ggplot()+geom_fontawesome(
"fa-person-half-dress",
family = "fa-solid-900"
)
sysfonts::font.families()
ggplot()+geom_fontawesome(
"fa-person-half-dress",
family = "fa-v4compatibility"
)
ggplot()+geom_fontawesome(
"fa-person-half-dress",
family = "fa-solid-900"
)
devtools::build()
usethis::use_version()
emojifont::list.emojifonts()
devtools::check()
devtools::build()
devtools::load_all()
list.fafonts()
devtools::build()
library(tidyverse)
library(fontawesome)
# Prepare waffle data
waffle_data <- mall_variables$wants %>%
as.character() %>%
map_dfr(function(interest) {
enriched_oas_enrollments %>%
mutate(
all_gender = case_when(
all_gender == "Prefer not to share" ~ "Other",
TRUE ~ all_gender
)
) %>%
group_by(all_gender) %>%
summarise(
total_gender = n(),
interested_in_want = sum(.data[[interest]], na.rm = TRUE),
percent_gender = (interested_in_want / total_gender) * 100,
.groups = "drop"
) %>%
mutate(interest = interest)
}) %>%
mutate(
total_squares = ceiling(percent_gender * 100 / 5),  # Scale to waffle squares
fa_icon = map_chr(all_gender, ~ fa_symbol_mapper$gender[[.x]])  # Map Font Awesome icons
) %>%
uncount(total_squares, .id = "square_id") %>%  # Expand rows for waffle squares
group_by(interest, all_gender) %>%
mutate(
row = (square_id - 1) %/% 10 + 1,  # Calculate grid row
col = (square_id - 1) %% 10 + 1   # Calculate grid column
)
